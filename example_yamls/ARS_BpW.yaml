# Copyright (c) 2023 Mobius Logic, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


# Description:
# Niche Info:
# # Environmnet:
# # Optimizer:
# # Notes:

init: "random"
core: "ePoet"
env: "BipedalWalker"
optimizer: "ARS"

# Frequency to store gifs of agent behavior
# If no videos are desired, put 0 as the value
visualize_freq: 1

# evaluation variables
#  Total number of evals combined for statistics is eval_jobs*rollouts_per_eval_job
#  same communication and balancing caveats as above
eval_jobs: 1
rollouts_per_eval_job: 5

master_seed: 24582922

max_active_envs: 10
num_start_envs: 5

mc_lower: 100
repro_threshold: 200
num_proposal_envs: 25
max_admitted_envs: 1


num_workers: 2

poet_epochs: 500
reproduction_interval: 1

# Frequency to store the entire state for reload
# Must be 1 or greater
# If no logging is desired, put "poet_epochs" as the value
checkpoint_interval: 5
checkpoint_compression: True

# log pata_ec each epoch
#  logs normalized ranks and capped scores
log_pata_ec: True

# Agent/Network structure
model_params:
  time_factor: 0
  layers: [40, 40]
  activations: ['np.tanh','np.tanh','np.tanh'] # relu, passthru, np.tanh, sigmoid, softmax
  noise_bias: 0.0
  output_noise: [False, False, False]
  sample_output: False # set to true for softmax
  normalize_obs: False

# uber_es optimizer
uber_es:
  # optimization variables
  #  Total number of rollouts used per optimization step is optim_jobs*rollouts_per_optim_job*2
  #  Higher rollouts_per_optim_job will reduce communication by increasing the 
  #  job length, but may lead to poor load balancing because jobs may finish at different
  #  times.
  optim_jobs: 25 # how many jobs to start per agent, this is handed to the MP.Pool()
  rollouts_per_optim_job: 4 # rollouts per job
  optim_iters: 10

# ARS optimizer
ARS:
  learning_rate: 0.02
  noise_std: 0.03
  top_frac: 0.8
